buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.android.gradle
        classpath libs.bintray.gradle
        classpath libs.kotlin.gradle
    }
}

plugins {
    alias(libs.plugins.detekt)
    alias(libs.plugins.ben.manes)
}

subprojects {
    if (path.contains("integrations") || path.contains("models-") || path.contains("example")) {
        return 
    }

    apply {
        plugin "io.gitlab.arturbosch.detekt"
    }
    apply from: "../detekt_configuration.gradle"

    dependencies {
        detektPlugins(libs.detekt.formatting)
    }

    tasks.register("detektFormat", io.gitlab.arturbosch.detekt.Detekt) {
        description "Reformats whole code base."
        parallel true
        disableDefaultRuleSets true
        buildUponDefaultConfig true
        autoCorrect true
        setSource(files("$projectDir/src/main/java"))
        include "**/*.kt"
        include "**/*.kts"
        exclude "**/resources/**"
        exclude "**/build/**"
        config.setFrom(files("$rootDir/detekt.yml"))
        reports {
            xml { enabled = false }
            html { enabled = false }
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    apply plugin: "com.jfrog.bintray"

    tasks.withType(Javadoc).all { enabled = false }

    tasks.withType(JavaCompile) { options.fork = true }
}

def isNonStable = { String version ->
    def unStableKeyword = ['ALPHA', 'RC', 'BETA', 'DEV', "M"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return unStableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
