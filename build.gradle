buildscript {
    ext.kotlin_version = '1.5.30'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.0'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.17.1"
    id "com.github.ben-manes.versions" version "0.39.0"
}

ext {
    retrofitVersion = '2.9.0'
    okioVersion =  '2.10.0'
    moshiVersion = '1.12.0'
    stagVersion = '2.6.0'
    junitVersion = '4.13.2'
    buildToolsVersion = '29.0.3'
    classgraphVersion = '4.8.115'
    assertJVersion = '3.20.2'
    robolectricVersion = "4.6.1"
    podamVersion = "7.2.7.RELEASE"
}

subprojects {
    if (path.contains("integrations") || path.contains("models-") || path.contains("example")) {
        return 
    }

    apply {
        plugin "io.gitlab.arturbosch.detekt"
    }
    apply from: "../detekt_configuration.gradle"

    dependencies {
        detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.17.1")
    }

    tasks.register("detektFormat", io.gitlab.arturbosch.detekt.Detekt) {
        description "Reformats whole code base."
        parallel true
        disableDefaultRuleSets true
        buildUponDefaultConfig true
        autoCorrect true
        setSource(files("$projectDir/src/main/java"))
        include "**/*.kt"
        include "**/*.kts"
        exclude "**/resources/**"
        exclude "**/build/**"
        config.setFrom(files("$rootDir/detekt.yml"))
        reports {
            xml { enabled = false }
            html { enabled = false }
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    apply plugin: "com.jfrog.bintray"

    tasks.withType(Javadoc).all { enabled = false }

    tasks.withType(JavaCompile) { options.fork = true }
}

def isNonStable = { String version ->
    def unStableKeyword = ['ALPHA', 'RC', 'BETA', 'DEV', "M"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return unStableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
