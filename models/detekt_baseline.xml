<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>TrailingWhitespace:EditSession.kt$com.vimeo.networking2.EditSession.kt</ID>
    <ID>UndocumentedPublicProperty:Followable.kt$Followable$val metadata: Metadata&lt;*, out FollowableInteractions&gt;?</ID>
    <ID>UndocumentedPublicProperty:SearchFacetCollection.kt$SearchFacetCollection$/** * A specific category you want videos for. */ @Json(name = "category") val categoryFacet: SearchFacet? = null</ID>
    <ID>UndocumentedPublicProperty:SearchFacetCollection.kt$SearchFacetCollection$/** * A specific license you want videos to be. */ @Json(name = "license") val licenseFacet: SearchFacet? = null</ID>
    <ID>UndocumentedPublicProperty:SearchFacetCollection.kt$SearchFacetCollection$/** * How fresh you want videos. */ @Json(name = "uploaded") val uploadedFacet: SearchFacet? = null</ID>
    <ID>UndocumentedPublicProperty:SearchFacetCollection.kt$SearchFacetCollection$/** * How long you want videos to be. */ @Json(name = "duration") val durationFacet: SearchFacet? = null</ID>
    <ID>UndocumentedPublicProperty:SearchFacetCollection.kt$SearchFacetCollection$/** * The account level of users you want returned. */ @Json(name = "user_type") val userTypeFacet: SearchFacet? = null</ID>
    <ID>UndocumentedPublicProperty:SearchFacetCollection.kt$SearchFacetCollection$/** * The type of filter to use to return result. */ @Json(name = "type") val typeFacet: SearchFacet? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Blog. */ @Json(name = "blog") val blog: String? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Channel data. */ @Json(name = "channel") val channel: Channel? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Group data. */ @Json(name = "group") val group: Group? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Is this On Demand a 360 video? */ @Json(name = "is_spatial") val isSpatial: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Is this video a Staff Pick? */ @Json(name = "is_staffpick") val isStaffPick: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Is this video a featured result? */ @Json(name = "is_featured") val isFeatured: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * The type of object that this search result is representing. * @see SearchResult.type */ @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * User data. */ @Json(name = "people") val user: User? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResult.kt$SearchResult$/** * Video data. */ @Json(name = "clip") val video: Video? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResultList.kt$SearchResultList$/** * The number of videos that were hidden from the results due to mature content. */ @Json(name = "mature_hidden_count") val matureHiddenCount: Int? = null</ID>
    <ID>UndocumentedPublicProperty:SearchResultList.kt$SearchResultList$/** * The search facets. */ @Json(name = "facets") val facetCollection: SearchFacetCollection? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * Season metadata. */ @Json(name = "metadata") val metadata: Metadata&lt;SeasonConnections, SeasonInteractions&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The creator of this On Demand page. */ @Json(name = "user") val user: User? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The description for this season. */ @Json(name = "description") val description: String? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The descriptive name of the season. */ @Json(name = "name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The position of the season relative to other seasons in the series. */ @Json(name = "position") val position: Int? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The season container''s relative URI. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The type of season. * @see Season.type */ @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:Season.kt$Season$/** * The unique identifier for this On Demand season. */ @Json(name = "resource_key") val resourceKey: String? = null</ID>
    <ID>UndocumentedPublicProperty:SeasonConnections.kt$SeasonConnections$/** * The Videos connection. */ @Json(name = "videos") val videos: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:SeasonInteractions.kt$SeasonInteractions$/** * The interactions for an On Demand video. */ @Internal @Json(name = "purchase") val purchase: PurchaseOnDemandInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:Space.kt$Space$/** * Whether the values of the upload_quota.space fields are for the lifetime quota or * the periodic quota. * @see Space.showingType */ @Json(name = "showing") val showing: String? = null</ID>
    <ID>UndocumentedPublicProperty:Spatial.kt$Spatial$/** * The 360 spatial projection. * @see Spatial.spatialProjectionType */ @Json(name = "projection") val spatialProjection: String? = null</ID>
    <ID>UndocumentedPublicProperty:Spatial.kt$Spatial$/** * The 360 stereo format. * @see Spatial.stereoFormatType */ @Json(name = "stereo_format") val stereoFormat: String? = null</ID>
    <ID>UndocumentedPublicProperty:SsoDomain.kt$SsoDomain$/** * The URL to which the user can be directed to authenticate themselves. */ @Json(name = "connect_url") val connectUrl: String? = null</ID>
    <ID>UndocumentedPublicProperty:SsoDomain.kt$SsoDomain$/** * The Vimeo URI of the domain. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:SsoDomain.kt$SsoDomain$/** * The name of the domain, also known as the hostname in the URL RFC 1738. */ @Json(name = "domain_name") val domainName: String? = null</ID>
    <ID>UndocumentedPublicProperty:Subscription.kt$Subscription$/** * Information about the user's billing info. */ @Json(name = "billing") val billing: Billing? = null</ID>
    <ID>UndocumentedPublicProperty:Subscription.kt$Subscription$/** * Information about the user's next renewal. */ @Json(name = "renewal") val renewal: SubscriptionRenewal? = null</ID>
    <ID>UndocumentedPublicProperty:Subscription.kt$Subscription$/** * Information about the user's trial period. */ @Json(name = "trial") val trial: SubscriptionTrial? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionInteraction.kt$SubscriptionInteraction$/** * The stream type. * @see SubscriptionInteraction.streamAccessType */ @Internal @Json(name = "stream") val streamAccess: String? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionInteraction.kt$SubscriptionInteraction$/** * The time in ISO 8601 format when the subscription expires. */ @Internal @Json(name = "expires_time") val expiresTime: Date? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionInteraction.kt$SubscriptionInteraction$/** * The time in ISO 8601 format when the subscription was purchased. */ @Internal @Json(name = "purchase_time") val purchaseTime: Date? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionInteraction.kt$SubscriptionInteraction$/** * Whether the video has DRM. */ @Internal @Json(name = "drm") val drm: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionRenewal.kt$SubscriptionRenewal$/** * The date in YYYY-MM-DD format when the user's membership renews (or expires, if they have * disabled autorenew). For display only. */ @Json(name = "display_date") val displayDate: String? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionRenewal.kt$SubscriptionRenewal$/** * The date the user's membership renews (or expires, if they have disabled autorenew). */ @Json(name = "renewal_date") val renewalDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionTrial.kt$SubscriptionTrial$/** * Has the user been in (or is currently in) a free trial. */ @Json(name = "has_been_in_free_trial") val hasBeenInFreeTrial: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:SubscriptionTrial.kt$SubscriptionTrial$/** * The status of the user's trial. * If the value is "free_trial" the user is currently in a free trial. */ @Json(name = "status") val rawStatus: String? = null</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "a user follows you" setting. */ @Json(name = "follow") val follow: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "new comments on your video" setting. */ @Json(name = "comment") val comment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "new likes on your videos" setting. */ @Json(name = "like") val like: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "new reply to your comment" setting. */ @Json(name = "reply") val reply: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "new upload transcode complete (new video is posted)" setting. */ @Json(name = "video_available") val videoAvailable: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "someone you follow uploaded a new item" setting. */ @Json(name = "followed_user_video_available") val followedUserVideoAvailable: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Subscriptions.kt$Subscriptions$/** * The "you are added to the credits of a video". */ @Json(name = "credit") val credit: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Tag.kt$Tag$/** * AlbumMetadata about the group. */ @Json(name = "metadata") val metadata: Metadata&lt;AlbumConnections, AlbumInteractions&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:Tag.kt$Tag$/** * The canonical relative URI of the tag. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:Tag.kt$Tag$/** * The normalized canonical tag name. */ @Json(name = "canonical") val canonical: String? = null</ID>
    <ID>UndocumentedPublicProperty:Tag.kt$Tag$/** * The tag value. */ @Json(name = "name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:Tag.kt$Tag$/** * The tag's resource key string. */ @Json(name = "resource_key") val resourceKey: String? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * A translated name of the logged in user's role on the team. */ @Json(name = "user_role") val userRole: String? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * Customized information about the team, including the team name, logo image, and accent color. */ @Json(name = "team_data") val teamBranding: TeamBranding? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * Customized information about the team, including the team name, logo image, and accent color. */ @Json(name = "team_membership") val teamMembership: TeamMembership? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * The current number of team members. */ @Json(name = "current_team_size") val currentTeamSize: Int? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * The maximum number of team members. */ @Json(name = "max_team_size") val maximumTeamSize: Int? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * The owner of the team. */ @Json(name = "owner") val owner: User? = null</ID>
    <ID>UndocumentedPublicProperty:Team.kt$Team$/** * Whether or not the team has content shared with any team members yet. */ @Json(name = "has_content_shared") val hasContentShared: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The ID of the team owner. */ @Json(name = "owner_id") val ownerId: Long? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The ID of the team. */ @Json(name = "id") val id: Long? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The URI of the team logo image. */ @Json(name = "logo_uri") val logoUri: String? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The active logo of the team. */ @Json(name = "pictures") val pictures: PictureCollection? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The hexadecimal color code for the accent color of the team. */ @Json(name = "accent_color") val acccentColor: String? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The name of the team. */ @Json(name = "team_name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:TeamBranding.kt$TeamBranding$/** * The team's URI. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:TeamMembershipConnections.kt$TeamMembershipConnections$/** * A connection object indicating how to get the owner of this user. */ @Json(name = "owner") val owner: TeamOwnerConnection? = null</ID>
    <ID>UndocumentedPublicProperty:TeamOwnerConnection.kt$TeamOwnerConnection$/** * The team owner's display name. */ @Json(name = "display_name") val displayName: String? = null</ID>
    <ID>UndocumentedPublicProperty:TeamOwnerConnection.kt$TeamOwnerConnection$/** * The total number of owners on this connection. */ @Json(name = "total") val total: Int? = null</ID>
    <ID>UndocumentedPublicProperty:TeamOwnerConnection.kt$TeamOwnerConnection$/** * The total number of team member invites remaining. */ @Json(name = "invites_remaining") val invitesRemaining: Int? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * The descriptive name of this text track. */ @Json(name = "name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * The language code for this text track. To see a full list, request * `/languages?filter=texttrack`. */ @Json(name = "language") val language: String? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * The read-only URL of the text track file, intended for use with HLS playback. */ @Json(name = "hsl_link") val hlsLink: String? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * The read-only URL of the text track file. You can upload to this link when you * create it for the first time. */ @Json(name = "link") val link: String? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * The relative URI of the text track. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * The time in ISO 8601 format when the read-only HLS playback text track file expires. */ val hlsLinkExpiresTime: Date? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** * Whether this text track is active. */ @Json(name = "active") val active: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:TextTrack.kt$TextTrack$/** *The type of the text track. * @see TextTrack.type */ @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:Transcode.kt$Transcode$/** * Status code for clip availability. * @see Transcode.statusType */ @Json(name = "status") val status: String? = null</ID>
    <ID>UndocumentedPublicProperty:TrialEligibility.kt$TrialEligibility$/** * `true` or `false` depending on if the user is eligible for a trial period. */ @Internal @Json(name = "eligible") val eligible: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * A descriptive title of this [TvodItem]. */ @Json(name = "name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * Information on the time the [TvodItem] was published. */ @Json(name = "published") val published: Publish? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * Metadata about [TvodItem]. */ @Json(name = "metadata") val metadata: Metadata&lt;TvodItemConnections, PurchaseOnDemandInteraction&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * The active poster for this [TvodItem]. */ @Json(name = "pictures") val pictures: PictureCollection? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * The description of this [TvodItem]. */ @Json(name = "description") val description: String? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * The link to the [TvodItem] on Vimeo. */ @Json(name = "link") val link: String? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * The trailer for this [TvodItem]. */ @Json(name = "trailer") val trailer: Video? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * The user who created this [TvodItem]. */ @Json(name = "user") val user: User? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * This [TvodItem]'s film, if it is a film. */ @Json(name = "film") val film: Video? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItem.kt$TvodItem$/** * Whether this [TvodItem] is for a film or a series. * @see TvodItem.type */ @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItemConnections.kt$TvodItemConnections$/** * Information about the comments associated with this page. */ @Json(name = "comment") val comments: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItemConnections.kt$TvodItemConnections$/** * Information about the genres associated with this page. */ @Json(name = "genres") val genres: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItemConnections.kt$TvodItemConnections$/** * Information about the likes associated with this page. */ @Json(name = "likes") val likes: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItemConnections.kt$TvodItemConnections$/** * Information about the pictures associated with this page. */ @Json(name = "pictures") val pictures: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItemConnections.kt$TvodItemConnections$/** * Information about the seasons associated with this page. */ @Json(name = "seasons") val seasons: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:TvodItemConnections.kt$TvodItemConnections$/** * Information about the videos associated with this page. */ @Json(name = "videos") val videos: VideosTvodItemConnection? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * GCS information to perform an upload. */ @Internal @Json(name = "gcs") val gcs: List&lt;Gcs&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The HTML form for uploading a video through the post approach. */ @Json(name = "form") val form: String? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The URI for completing the upload. */ @Json(name = "complete_uri") val completeUri: String? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The approach for uploading the video. * @see Upload.approachType */ @Json(name = "approach") val approach: String? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The file size in bytes of the uploaded video. */ @Json(name = "size") val size: Long? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The link for sending video file data. */ @Json(name = "upload_link") val uploadLink: String? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The link of the video to capture through the pull approach. */ @Json(name = "link") val link: String? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The redirect URL for the upload app. */ @Json(name = "redirectUrl") val redirectUrl: String? = null</ID>
    <ID>UndocumentedPublicProperty:Upload.kt$Upload$/** * The status code for the availability of the uploaded video. * @see Upload.statusType */ @Json(name = "status") val status: String? = null</ID>
    <ID>UndocumentedPublicProperty:UploadQuota.kt$UploadQuota$/** * Quota information. */ @Json(name = "quota") val quota: Quota? = null</ID>
    <ID>UndocumentedPublicProperty:UploadQuota.kt$UploadQuota$/** * Space information. */ @Json(name = "space") val space: Space? = null</ID>
    <ID>UndocumentedPublicProperty:UploadQuota.kt$UploadQuota$/** * The number of bytes remaining in your lifetime maximum. */ @Json(name = "lifetime") val lifetime: Lifetime? = null</ID>
    <ID>UndocumentedPublicProperty:UploadQuota.kt$UploadQuota$/** * The number of bytes remaining in your upload quota for the current period. */ @Json(name = "periodic") val periodic: Periodic? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * An array of alternate emails for the user. */ @Internal @Json(name = "emails") val emails: List&lt;Email&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * Appears only when the user has upload access and is looking at their own user record. */ @Json(name = "upload_quota") val uploadQuota: UploadQuota? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * Information about the user's live streaming quota. */ @Json(name = "live_quota") val liveQuota: LiveQuota? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * Set to true for user instances embedded in a [Video] instance, otherwise will be unset. */ @Json(name = "is_creator") val isCreator: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The absolute URL of this user's profile page. */ @Json(name = "link") val link: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The active portrait of this user. */ @Json(name = "pictures") val pictures: PictureCollection? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The time in ISO 8601 format when the user account was created. */ @Json(name = "created_time") val createdTime: Date? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's bio. */ @Json(name = "bio") val bio: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's canonical relative URI. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's content filters. * @see User.contentFilterTypes */ @Json(name = "content_filter") val contentFilters: List&lt;String&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's display name. */ @Json(name = "name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's email address. */ @Json(name = "email") val email: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's location. */ @Json(name = "location") val location: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's membership. */ @Json(name = "membership") val membership: Membership? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's resource key string. */ @Json(name = "resource_key") val resourceKey: String? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * The user's websites. */ @Json(name = "websites") val websites: List&lt;Website&gt;? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$/** * User's preferences. */ @Json(name = "preferences") val preferences: Preferences? = null</ID>
    <ID>UndocumentedPublicProperty:UserBadge.kt$UserBadge$/** * The URL that loads when the user clicks the badge. */ @Internal @Json(name = "url") val url: String? = null</ID>
    <ID>UndocumentedPublicProperty:UserBadge.kt$UserBadge$/** * The badge's alternate text. */ @Internal @Json(name = "alt_text") val altText: String? = null</ID>
    <ID>UndocumentedPublicProperty:UserBadge.kt$UserBadge$/** * The text of the badge. */ @Internal @Json(name = "text") val text: String? = null</ID>
    <ID>UndocumentedPublicProperty:UserBadge.kt$UserBadge$/** * The type of the badge. * @see UserBadge.type */ @Internal @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Disallow a user from viewing a private channel. */ @Json(name = "add_privacy_user") val addPrivacyUser: BasicInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Information regarding where and how to report a user. */ @Json(name = "report") val report: BasicInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Information related to the Facebook connected app. */ @Json(name = "facebook_connected_app") val facebookConnectedApp: ConnectedAppInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Information related to the LinkedIn connected app. */ @Json(name = "linkedin_connected_app") val linkedInConnectedApp: ConnectedAppInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Information related to the Twitter connected app. */ @Json(name = "twitter_connected_app") val twitterConnectedApp: ConnectedAppInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Information related to the YouTube connected app. */ @Json(name = "youtube_connected_app") val youTubeConnectedApp: ConnectedAppInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:UserInteractions.kt$UserInteractions$/** * Information related to the block status of this user. */ @Json(name = "block") val block: BasicInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadge.kt$VideoBadge$/** * The badge image. */ @Json(name = "pictures") val pictures: PictureCollection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadge.kt$VideoBadge$/** * The festival that this badge represents. */ @Internal @Json(name = "festival") val festival: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadge.kt$VideoBadge$/** * The link for the badge */ @Json(name = "link") val link: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadge.kt$VideoBadge$/** * The name of the badge. */ @Json(name = "text") val text: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadge.kt$VideoBadge$/** * The type of the badge. * @see VideoBadge.type */ @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadges.kt$VideoBadges$/** * Live data. */ @Json(name = "live") val live: Live? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadges.kt$VideoBadges$/** * Whether the video has an HDR-compatible transcode. */ @Json(name = "hdr") val hdr: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VideoBadges.kt$VideoBadges$/** * Whether the video is a Vimeo Weekend Challenge. */ @Json(name = "weekendChallenge") val weekendChallenge: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Connection to get all the logged-in user's available albums that this video can be added to. */ @Json(name = "available_albums") val availableAlbums: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Connection to get all the logged-in user's available channels that this video can be added to. */ @Json(name = "available_channels") val availableChannels: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Connection to get the Publish to Social data for this video. */ @Json(name = "publish_to_social") val publish: PublishJobConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about the comments on this video. */ @Json(name = "comments") val comments: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about the user privacy of this video, if the video privacy is users. */ @Json(name = "users_with_access") val usersWithAccess: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about the users credited in this video. */ @Json(name = "credit") val credit: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about the users who have liked this video. */ @Json(name = "likes") val likes: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about the video's on-demand status. */ @Internal @Json(name = "ondemand") val onDemand: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about the video's season. */ @Json(name = "season") val season: VideoSeasonConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about this video's VOD trailer. */ @Json(name = "trailer") val trailer: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about this video's live stream stats. */ @Internal @Json(name = "live_stats") val liveStats: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about this video's text tracks. */ @Json(name = "texttracks") val textTracks: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Information about this video's thumbnails. */ @Json(name = "pictures") val pictures: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * Related content for this video. */ @Json(name = "related") val related: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * The DRM playback status connection for this video. */ @Json(name = "playback") val playback: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoConnections.kt$VideoConnections$/** * The recommendations for this video. */ @Json(name = "recommendations") val recommendations: BasicConnection? = null</ID>
    <ID>UndocumentedPublicProperty:VideoContext.kt$VideoContext$/** * The contextual action. * @see VideoContext.videoActionType */ @Json(name = "action") val videoAction: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoContext.kt$VideoContext$/** * The contextual resource type. */ @Json(name = "resource_type") val resourceType: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * A collection of information about the buttons that appear on the * interface of the embeddable player. */ @Json(name = "buttons") val buttons: EmbedButtons? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * A collection of information relating to the embeddable player's title bar. */ @Json(name = "title") val title: EmbedTitle? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * A collection of the video's badges. */ @Json(name = "badges") val badges: VideoBadges? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * HTML code for embedding this video on a web page. */ @Json(name = "html") val html: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * The URI of the embed preset. */ @Json(name = "uri") val uri: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * The primary player color, which controls the color of the progress bar, buttons, * and more. */ @Json(name = "color") val color: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * Whether the playbar appears in the embeddable player for this video. */ @Json(name = "playBar") val playBar: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * Whether the speed controls appear in the embeddable player for this video. */ @Json(name = "speed") val speed: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VideoEmbed.kt$VideoEmbed$/** * Whether the volume controls appear in the embeddable player for this video. */ @Json(name = "volume") val volume: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * Information about where and how to report a video. */ @Json(name = "report") val report: BasicInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * Information about whether the authenticated user has liked this video. */ @Json(name = "like") val like: LikeInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * Information about whether this video appears on the authenticated user's Watch Later list. */ @Json(name = "watchlater") val watchLater: WatchLaterInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * Subscription information for an On Demand video. */ @Internal @Json(name = "subscribe") val subscription: SubscriptionInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * The Rent interaction for an On Demand video. */ @Internal @Json(name = "rent") val rent: RentInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * The buy interaction for a On Demand video. */ @Internal @Json(name = "buy") val buy: BuyInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * The interaction used to add a video to multiple albums. */ @Json(name = "album") val album: BasicInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoInteractions.kt$VideoInteractions$/** * When a video is referenced by a channel URI, if the user is a moderator of the * channel, include information about removing the video from the channel. */ @Internal @Json(name = "channel") val channel: BasicInteraction? = null</ID>
    <ID>UndocumentedPublicProperty:VideoLog.kt$VideoLog$/** * The URL to record a Play logging event. */ @Json(name = "play") val play: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSeasonConnection.kt$VideoSeasonConnection$/** * The name of the season. */ @Json(name = "name") val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The FPS of the video. */ @Json(name = "fps") val fps: Int? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The MD5 hash of the video file. */ @Json(name = "md5") val md5: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The direct link to this video file. */ @Json(name = "link") val link: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The file size of the video. */ @Json(name = "size") val size: Long? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The height of the video in pixels. */ @Json(name = "height") val height: Int? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The source link for the video file. */ @Json(name = "source_link") val sourceLink: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The time in ISO 8601 format when the video file expires. */ @Json(name = "expires") val expires: Date? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The time in ISO 8601 format when the video file was created. */ @Json(name = "created_time") val createdTime: Date? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The type of the video file. * @see VideoSourceFile.type */ @Json(name = "type") val rawType: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The video quality (as determined by height and width). * @see VideoSourceFile.videoQualityType */ @Json(name = "quality") val videoQuality: String? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * The width of the video in pixels. */ @Json(name = "width") val width: Int? = null</ID>
    <ID>UndocumentedPublicProperty:VideoSourceFile.kt$VideoSourceFile$/** * Video logging information. */ @Json(name = "log") val log: VideoLog? = null</ID>
    <ID>UndocumentedPublicProperty:VideoStats.kt$VideoStats$/** * The current total number of times that the video has been played. */ @Json(name = "plays") val plays: Int? = null</ID>
    <ID>UndocumentedPublicProperty:VideosPreference.kt$VideosPreference$/** * Privacy values for videos. */ @Json(name = "privacy") val privacy: Privacy? = null</ID>
  </CurrentIssues>
</SmellBaseline>
